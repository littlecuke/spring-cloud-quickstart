server:
  port: 9001                                    # 服务端口
spring:
  application:
    name: order-service                         # 服务名称
  datasource:
    driver-class-name: com.mysql.jdbc.Driver    # 驱动全限定类名
    url: jdbc:mysql:///cloud_order?useSSL=false # 数据库连接地址
    username: root                              # 用户名
    password: 123456                            # 密码
  cloud:
    nacos:
      server-addr: localhost:8848               # nacos 服务地址
      discovery:
        cluster-name: SH                        # 配置集群名称，比如: SH，上海
        namespace: 69865fe0-8f2c-418a-a6b5-af24b62a27a8 # 配置命名空间
        ephemeral: false                        # 设置为非临时实例
        # Nacos环境隔离
        # 1.使用namespace配置环境隔离
        # 2.每个namespace都有唯一id
        # 3.不同namespace下的服务不可见
mybatis:
  type-aliases-package: org.example.order.pojo  # 实体类别名路径
  configuration:
    map-underscore-to-camel-case: true          # 开启下划线转驼峰
  mapper-locations: classpath:mapper/*.xml      # Mapper XML 文件地址
logging:
  level:
    org.example: debug
  pattern:
    dateformat: MM-dd HH:mm:ss
#eureka:
#  client:
#    service-url:
#      defaultZone: http://127.0.0.1:9000/eureka # 注册中心
user-service:
  ribbon:
    # NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 配置负载均衡策略规则
    # Nacos负载均衡策略
    # 1.优先选择同集群服务实例列表
    # 2.本地集群找不到提供者, 才去其他集群中寻找, 并且会报警告
    # 3.确定了可用实例列表后, 再采用随机负载均衡挑选实例
    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule # 配置负载均衡策略规则
    # 实例的权重控制
    # 1.Nacos控制台可以设置实例的权重值，0~1之间
    # 2.同集群内的多个实例，权重越高被访问的频率越高
    # 3.权重设置为0，则完全不会被访问
# Ribbon 默认是懒加载的，即第一次访问时才创建LoadBalanceClient，请求时间会很长
# 饥饿加载则会在项目启动时创建，降低第一次访问的耗时
ribbon:
  eager-load:
    enabled: true # 开启饥饿加载
    clients: user-service # 指定要进行饥饿加载的服务
